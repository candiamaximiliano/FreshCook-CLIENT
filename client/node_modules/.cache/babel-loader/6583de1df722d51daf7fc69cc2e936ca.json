{"ast":null,"code":"import axiosInstance from \"./api\";\nimport TokenService from \"./tokenService\";\nimport { refreshToken } from \"../redux/actions/auth\";\n\nconst setup = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const token = TokenService.getLocalAccessToken();\n\n    if (token) {\n      // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n      config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const originalConfig = err.config;\n\n    if (originalConfig.url !== \"/auth/signin\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n\n        try {\n          const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\n            refreshToken: TokenService.getLocalRefreshToken()\n          });\n          const {\n            accessToken\n          } = rs.data;\n          dispatch(refreshToken(accessToken));\n          TokenService.updateLocalAccessToken(accessToken);\n          return axiosInstance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nexport default setup;","map":{"version":3,"names":["axiosInstance","TokenService","refreshToken","setup","store","interceptors","request","use","config","token","getLocalAccessToken","headers","error","Promise","reject","dispatch","response","res","err","originalConfig","url","status","_retry","rs","post","getLocalRefreshToken","accessToken","data","updateLocalAccessToken","_error"],"sources":["C:/Users/Maxim/Desktop/FreshCook-app/client/src/services/setupInterceptors.js"],"sourcesContent":["import axiosInstance from \"./api\";\r\nimport TokenService from \"./tokenService\";\r\nimport { refreshToken } from \"../redux/actions/auth\";\r\nconst setup = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const token = TokenService.getLocalAccessToken();\r\n      if (token) {\r\n        // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\r\n        config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const originalConfig = err.config;\r\n      if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n        // Access Token was expired\r\n        if (err.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n          try {\r\n            const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\r\n              refreshToken: TokenService.getLocalRefreshToken(),\r\n            });\r\n            const { accessToken } = rs.data;\r\n            dispatch(refreshToken(accessToken));\r\n            TokenService.updateLocalAccessToken(accessToken);\r\n            return axiosInstance(originalConfig);\r\n          } catch (_error) {\r\n            return Promise.reject(_error);\r\n          }\r\n        }\r\n      }\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\nexport default setup;"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,OAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,uBAA7B;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;EACvBJ,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;IACV,MAAMC,KAAK,GAAGR,YAAY,CAACS,mBAAb,EAAd;;IACA,IAAID,KAAJ,EAAW;MACT;MACAD,MAAM,CAACG,OAAP,CAAe,gBAAf,IAAmCF,KAAnC,CAFS,CAEiC;IAC3C;;IACD,OAAOD,MAAP;EACD,CARH,EASGI,KAAD,IAAW;IACT,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;EACD,CAXH;EAaA,MAAM;IAAEG;EAAF,IAAeX,KAArB;EACAJ,aAAa,CAACK,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CACGU,GAAD,IAAS;IACP,OAAOA,GAAP;EACD,CAHH,EAIE,MAAOC,GAAP,IAAe;IACb,MAAMC,cAAc,GAAGD,GAAG,CAACV,MAA3B;;IACA,IAAIW,cAAc,CAACC,GAAf,KAAuB,cAAvB,IAAyCF,GAAG,CAACF,QAAjD,EAA2D;MACzD;MACA,IAAIE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAAxB,IAA+B,CAACF,cAAc,CAACG,MAAnD,EAA2D;QACzDH,cAAc,CAACG,MAAf,GAAwB,IAAxB;;QACA,IAAI;UACF,MAAMC,EAAE,GAAG,MAAMvB,aAAa,CAACwB,IAAd,CAAmB,oBAAnB,EAAyC;YACxDtB,YAAY,EAAED,YAAY,CAACwB,oBAAb;UAD0C,CAAzC,CAAjB;UAGA,MAAM;YAAEC;UAAF,IAAkBH,EAAE,CAACI,IAA3B;UACAZ,QAAQ,CAACb,YAAY,CAACwB,WAAD,CAAb,CAAR;UACAzB,YAAY,CAAC2B,sBAAb,CAAoCF,WAApC;UACA,OAAO1B,aAAa,CAACmB,cAAD,CAApB;QACD,CARD,CAQE,OAAOU,MAAP,EAAe;UACf,OAAOhB,OAAO,CAACC,MAAR,CAAee,MAAf,CAAP;QACD;MACF;IACF;;IACD,OAAOhB,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;EACD,CAxBH;AA0BD,CAzCD;;AA0CA,eAAef,KAAf"},"metadata":{},"sourceType":"module"}