{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, REFRESH_TOKEN } from \"./types\";\nimport AuthService from \"../../services/authService\";\nexport const register = input => dispatch => {\n  return AuthService.register(input).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const refreshToken = accessToken => dispatch => {\n  dispatch({\n    type: REFRESH_TOKEN,\n    payload: accessToken\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","REFRESH_TOKEN","AuthService","register","input","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","username","password","user","logout","refreshToken","accessToken"],"sources":["C:/Users/Maxim/Desktop/FreshCook-app/client/src/redux/actions/auth.js"],"sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n  REFRESH_TOKEN,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../../services/authService\";\r\n\r\nexport const register = (input) => (dispatch) => {\r\n  return AuthService.register(input).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\nexport const refreshToken = (accessToken) => (dispatch) => {\r\n  dispatch({\r\n    type: REFRESH_TOKEN,\r\n    payload: accessToken,\r\n  });\r\n};\r\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,EAOEC,aAPF,QAQO,SARP;AAUA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAYC,QAAD,IAAc;EAC/C,OAAOH,WAAW,CAACC,QAAZ,CAAqBC,KAArB,EAA4BE,IAA5B,CACJC,QAAD,IAAc;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAGAU,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFhB,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD,CAVI,EAWJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAMAV,QAAQ,CAAC;MACPG,IAAI,EAAEZ;IADC,CAAD,CAAR;IAGAS,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEE;IAFF,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CA1BI,CAAP;AA4BD,CA7BM;AA+BP,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyBd,QAAD,IAAc;EACzD,OAAOH,WAAW,CAACe,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCb,IAAtC,CACJI,IAAD,IAAU;IACRL,QAAQ,CAAC;MACPG,IAAI,EAAEX,aADC;MAEPY,OAAO,EAAE;QAAEW,IAAI,EAAEV;MAAR;IAFF,CAAD,CAAR;IAIA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD,CAPI,EAQJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAMAV,QAAQ,CAAC;MACPG,IAAI,EAAEV;IADC,CAAD,CAAR;IAGAO,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEE;IAFF,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CAvBI,CAAP;AAyBD,CA1BM;AA4BP,OAAO,MAAMK,MAAM,GAAG,MAAOhB,QAAD,IAAc;EACxCH,WAAW,CAACmB,MAAZ;EACAhB,QAAQ,CAAC;IACPG,IAAI,EAAET;EADC,CAAD,CAAR;AAGD,CALM;AAOP,OAAO,MAAMuB,YAAY,GAAIC,WAAD,IAAkBlB,QAAD,IAAc;EACzDA,QAAQ,CAAC;IACPG,IAAI,EAAEP,aADC;IAEPQ,OAAO,EAAEc;EAFF,CAAD,CAAR;AAID,CALM"},"metadata":{},"sourceType":"module"}